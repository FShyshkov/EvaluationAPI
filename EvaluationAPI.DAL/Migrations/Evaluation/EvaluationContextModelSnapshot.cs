// <auto-generated />
using EvaluationAPI.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EvaluationAPI.DAL.Migrations.Evaluation
{
    [DbContext(typeof(EvaluationContext))]
    partial class EvaluationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvaluationAPI.DAL.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("TestId");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions","TestsDB");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            Answer = "010",
                            Name = "Question1?",
                            QuestionText = "PossibleAnswer1,CorrectAnswer,PossibleAnswer3",
                            TestId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            Answer = "0010",
                            Name = "Question2?",
                            QuestionText = "PossibleAnswer1 asd,PossibleAnswer 2, CorrectAnswer, Answer4",
                            TestId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            Answer = "0100",
                            Name = "Question3?",
                            QuestionText = "PossibleAnswer21 asd,Correct Answer,Possib4le  234252Answer3, Answer4",
                            TestId = 1
                        },
                        new
                        {
                            QuestionId = 4,
                            Answer = "010",
                            Name = "Question4?",
                            QuestionText = "PossibleAnswe4r1 asd,Correct answer,Possible252Answer3",
                            TestId = 2
                        },
                        new
                        {
                            QuestionId = 5,
                            Answer = "10100",
                            Name = "Question5?",
                            QuestionText = "CorrectAnswer1,Possinswer 2,CorrectAnswer2, PossibleAnswer4, PossibleAnswer5",
                            TestId = 2
                        });
                });

            modelBuilder.Entity("EvaluationAPI.DAL.Entities.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TestId");

                    b.Property<int>("TestResult")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("ResultId");

                    b.HasIndex("TestId");

                    b.ToTable("Results","TestsDB");
                });

            modelBuilder.Entity("EvaluationAPI.DAL.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("TestId");

                    b.ToTable("Tests","TestsDB");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            TestName = "Test1"
                        },
                        new
                        {
                            TestId = 2,
                            TestName = "Test2"
                        },
                        new
                        {
                            TestId = 3,
                            TestName = "Test3"
                        });
                });

            modelBuilder.Entity("EvaluationAPI.DAL.Entities.Question", b =>
                {
                    b.HasOne("EvaluationAPI.DAL.Entities.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EvaluationAPI.DAL.Entities.Result", b =>
                {
                    b.HasOne("EvaluationAPI.DAL.Entities.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
